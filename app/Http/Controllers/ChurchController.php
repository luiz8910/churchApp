<?phpnamespace App\Http\Controllers;use App\Models\Role;use App\Repositories\ChurchRepository;use App\Repositories\PersonRepository;use App\Repositories\ResponsibleRepository;use App\Repositories\RoleRepository;use App\Repositories\StateRepository;use App\Services\ChurchServices;use App\Traits\DateRepository;use App\Traits\EmailTrait;use App\Traits\PeopleTrait;use App\Traits\UserLoginRepository;use Illuminate\Http\Request;use App\Services\PaymentServices;use Illuminate\Support\Facades\DB;class ChurchController extends Controller{    use PeopleTrait, DateRepository, UserLoginRepository, EmailTrait;    /**     * @var ChurchRepository     */    private $repository;    /**     * @var ResponsibleRepository     */    private $responsibleRepository;    private $paymentServices;    /**     * @var StateRepository     */    private $stateRepository;    /**     * @var RoleRepository     */    private $roleRepository;    /**     * @var PersonRepository     */    private $personRepository;    /**     * @var ChurchServices     */    private $churchServices;    public function __construct(ChurchRepository $repository, ResponsibleRepository $responsibleRepository,                                PaymentServices $paymentServices, StateRepository $stateRepository,                                RoleRepository $roleRepository, PersonRepository $personRepository,                                ChurchServices $churchServices)    {        $this->repository = $repository;        $this->responsibleRepository = $responsibleRepository;        $this->paymentServices = $paymentServices;        $this->stateRepository = $stateRepository;        $this->roleRepository = $roleRepository;        $this->personRepository = $personRepository;        $this->churchServices = $churchServices;    }    public function getChurchesApi()    {        $churches = $this->repository->all();        return json_encode($churches);    }    public function newResponsible(Request $request, $plan_id)    {        $email = $request->get('email');        $name = $request->get('name');        $data = $request->except(['name, email']);        $role_id = Role::where(['name' => 'Administrador'])->first()->id;        $resp['email'] = $email;        $fullName = $this->surname($name);        $resp["name"] = ucfirst($fullName[0]);        if(isset($fullName[1]))        {            $resp["lastName"] = ucwords($fullName[1]);        }        $resp['role_id'] = $role_id;        if(count($this->responsibleRepository->findByField('email', $email)) == 0)        {            $responsible = $this->responsibleRepository->create($resp);            if($responsible)            {                $data['owner_id'] = $responsible->id;                $credit = $this->paymentServices->newCreditCard($data);                $church['name'] = 'Nova Igreja';                $church['email'] = $email;                $church['responsible_id'] = $responsible->id;                $church['tel'] = '999999';                $church['cnpj'] = '999999';                $church['plan_id'] = $plan_id;                if($credit)                {                    $church = $this->repository->create($church);                    if($church)                    {                        return redirect()->route('post.confirmation', ['id' => $responsible->id]);                    }                }            }        }        $request->session()->flash('error.msg', 'Um erro ocorreu');        return redirect()->back();    }    public function verifyCreditCard($number)    {        if($this->paymentServices->cardExists($number))        {            return json_encode(['status' => true, 'cardExists' => true]);        }        return json_encode(['status' => true, 'cardExists' => false]);    }    public function postConfirmation($id)    {        $responsible = $this->responsibleRepository->find($id);        $state = $this->stateRepository->all();        $visitor_id = $this->roleRepository->findByField('name', 'Visitante')->first()->id;        $roles = $this->roleRepository->findWhereNotIn('id', [$visitor_id]);        $role_id = $responsible->role_id;        $email = $responsible->email;        $name = $responsible->name;        $lastName = $responsible->lastName;        $church = $this->repository->findByField('responsible_id', $id)->first();        return view('churches.post-confirmation', compact('responsible', 'state', 'roles', 'role_id', 'email',                        'name', 'lastName', 'church'));    }    public function storeResponsible(Request $request)    {        try{            $resp = $request->only([                'name', 'lastName', 'email', 'cel', 'dateBirth', 'cpf', 'gender', 'maritalStatus',                'zipCode', 'street', 'neighborhood', 'city', 'state', 'number'            ]);            $church_array = $request->only([                'church_name', 'church_alias', 'tel', 'cnpj', 'zipCode-2', 'street-2', 'neighborhood-2', 'city-2',                'state-2', 'number-2'            ]);            $responsible_id = $request->get('responsible_id');            $resp['dateBirth'] = $this->formatDateBD($resp['dateBirth']);            $resp['role_id'] = $this->responsibleRepository->find($responsible_id)->role_id;            $resp['partner'] = 0;            $resp['imgProfile'] = 'uploads/profile/noimage.png';            $resp["city"] = ucwords($resp["city"]);            $church_id = $request->get('church_id');            $resp['church_id'] = $church_id;            $file = $request->file('img');            $email = $request->get('email');            $person = $this->personRepository->create($resp)->id;            if($person)            {                DB::table('responsibles')                    ->where('id', $responsible_id)                    ->update(['person_id' => $person]);                if($church_array['church_alias'] == "")                {                    $church_array['church_alias'] = $this->churchServices->setChurchAlias($church_array['church_name']);                }                $password = $church_array['church_alias'];                $user = $this->createUserLogin($person, $password, $email, $church_id);                $this->welcome($user, $password);                $this->updateTag($this->tag($resp['dateBirth']), $person, 'people');                if ($file) {                    $this->imgProfile($file, $person, $resp['name'], 'people');                }                $this->newRecentUser($person, $church_id);                session(['church' => $church_id]);                $church['name'] = $church_array['church_name'];                $church['email'] = $email;                $church['tel'] = $church_array['tel'];                $church['cnpj'] = $church_array['cnpj'];                $church['zipCode'] = $church_array['zipCode-2'];                $church['street'] = $church_array['street-2'];                $church['neighborhood'] = $church_array['neighborhood-2'];                $church['city'] = ucwords($church_array['city-2']);                $church['state'] = $church_array['state-2'];                $church['number'] = $church_array['number-2'];                $church['alias'] = $church_array['church_alias'];                $this->repository->update($church, $church_id);                auth()->loginUsingId($user->id);            }            DB::commit();            return redirect()->route('index');        }catch(\Exception $e)        {            DB::rollback();            //dd($e);            $request->session()->flash('error.msg', 'Um erro ocorreu, tente novamente');            return redirect()->back();        }    }}